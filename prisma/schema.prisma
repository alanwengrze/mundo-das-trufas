generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  image         String?
  emailVerified DateTime?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cart          Cart?
  Order         Order[]
  accounts      Account[]
  sessions      Session[]
  address       Address[]

  @@index([email])
  @@map("users")
}

enum Role {
  CUSTOMER
  ADMIN
}

model Address {
  id           String  @id @default(uuid())
  userId       String
  street       String
  number       String
  neighborhood String
  city         String
  state        String
  zipCode      String
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  order        Order[]

  @@map("address")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id              String      @id @default(uuid())
  stripeId        String?
  categoryId      String
  name            String
  description     String
  price           Float
  discountPrice   Float?
  imageUrl        String?
  quantityInStock Int
  active          Boolean     @default(true)
  currency        String      @default("brl")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  itemsCart       ItemCart[]
  itemsOrder      ItemOrder[]
  category        Category    @relation(fields: [categoryId], references: [id])

  @@index([categoryId])
  @@map("products")
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  product Product[]

  @@index([name])
  @@map("categories")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  amount    Float
  itemsCart ItemCart[] //um array de produtos (cada item do carrinho)
  order     Order? //conecta o carrinho com o Pedido
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("carts")
}

model ItemCart {
  id        String @id @default(uuid())
  quantity  Int    @default(1) //qntd de produto adicionado
  productId String
  cartId    String

  cart    Cart    @relation(fields: [cartId], references: [id]) //para conectar com o carrinho
  product Product @relation(fields: [productId], references: [id]) //para conectar com cada produto

  @@map("items_cart")
}

model Order {
  id         String          @id @default(uuid())
  userId     String?
  cartId     String?         @unique
  amount     Float
  status     OrderStatusEnum @default(PENDING)
  orderDate  DateTime        @default(now())
  itemsOrder ItemOrder[] //array de itens do pedido
  payment    Payment?
  addressId  String

  address Address @relation(fields: [addressId], references: [id])
  user    User?   @relation(fields: [userId], references: [id])
  cart    Cart?   @relation(fields: [cartId], references: [id])

  @@index([status])
  @@map("orders")
}

enum OrderStatusEnum {
  PENDING
  PROCESSING
  COMPLETED
  CANCELED
}

model ItemOrder {
  id        String  @id @default(uuid())
  quantity  Int     @default(1)
  productId String
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("items_order")
}

model Payment {
  id          String            @id @default(uuid())
  orderId     String            @unique
  stripeId    String
  status      PaymentStatusEnum @default(PENDING)
  paymentDate DateTime          @default(now())
  type        String
  amount      Float
  metadata    Json?
  order       Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum PaymentStatusEnum {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}
